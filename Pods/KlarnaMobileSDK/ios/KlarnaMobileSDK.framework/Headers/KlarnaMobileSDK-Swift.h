// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol KlarnaWebView;
@protocol KlarnaHybridSDKEventListener;

/// Klarna’s solution to integrating it’s products in a “hybrid” context (one in which Klarna’s)
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// \param webView A web view (either UIWebView or WKWebView) for Klarna’s SDK to operate on.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithWebView:(id <KlarnaWebView> _Nonnull)webView returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridSDKEventListener> _Nonnull)eventListener OBJC_DESIGNATED_INITIALIZER;
/// Notify Klarna Hybrid SDK when a new page will be loaded.
- (void)newPageWillLoadIn:(id <KlarnaWebView> _Nonnull)webView;
/// Verify with the SDK whether a web view navigation should be followed in your web view.
/// If using a <code>UIWebView</code>, checking should be performed in:
/// <code>webView(_: shouldStartLoadWith: navigationType:)</code>
/// If using a <code>WKWebView</code>, checking should be perfomed in:
/// webView(_: decidePolicyFor: decisionHandler:) wuth the <code>navigationAction</code>’s <code>reqeuest</code> propeerty.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return false. You should block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning true. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request the navigation action to handle
///
///
/// returns:
/// whether Hybrid SDK can handle this navigation action or not
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s device ID for the app install.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class KlarnaMobileSDKError;

/// The merchant’s app can listen to Hybrid SDK events in the Hybrid SDK by implementing this
/// protocol.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK28KlarnaHybridSDKEventListener_")
@protocol KlarnaHybridSDKEventListener
/// Event to notify the merchant app that the following web view will present content that
/// should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(SWIFT_NOESCAPE void (^ _Nonnull)(void))completion;
/// Event to notify the merchant app merchant that content that should be presented in
/// full-screen has been displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(SWIFT_NOESCAPE void (^ _Nonnull)(void))completion;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(SWIFT_NOESCAPE void (^ _Nonnull)(void))completion;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it is now displaying “regular” content.
/// \param webView Web View presenting original content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(SWIFT_NOESCAPE void (^ _Nonnull)(void))completion;
/// Event to notify merchant that an error occured during Hybrid SDK usage.
/// \param webView on which webview the failure happened.
///
/// \param error detail error.
///
- (void)klarnaHybridSDKFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end


/// A KlarnaMobileSDKError describes an error that occurred during any of the stages within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaMobileSDKError")
@interface KlarnaMobileSDKError : NSObject
/// Unique name for this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Informs whether this error is fatal. If an error is fatal, the payment view should not be shown any further.
@property (nonatomic, readonly) BOOL isFatal;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;

/// A UIView rendering a payment method category.
/// It acts as an interface to methods relevant to the payment method category it’s rendering.
SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Klarna payment view does not support initialization from storyboard or xib files.
/// note:
///
/// You should never need to initialize a <code>KlarnaPaymentView</code> yourself,
/// Use <code>KlarnaPaymets</code>’s factory method to make a new instance of <code>KlarnaPaymentView</code>.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






/// A KlarnaPaymentError describes an error that occurred during any of the stages within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK19KlarnaPaymentsError")
@interface KlarnaPaymentsError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// General class that envelops UIWebView and WKWebView
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK13KlarnaWebView_")
@protocol KlarnaWebView
- (UIView * _Nonnull)associatedView SWIFT_WARN_UNUSED_RESULT;
- (void)setScrollEnabled:(BOOL)enabled;
- (void)loadUrlRequest:(NSURLRequest * _Nonnull)request;
- (void)loadHtmlString:(NSString * _Nonnull)htmlString baseURL:(NSURL * _Nullable)baseURL;
- (void)scrollToRect:(CGRect)rect animated:(BOOL)animated;
@end








@interface UIWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
- (UIView * _Nonnull)associatedView SWIFT_WARN_UNUSED_RESULT;
- (void)setScrollEnabled:(BOOL)enabled;
- (void)loadUrlRequest:(NSURLRequest * _Nonnull)request;
- (void)loadHtmlString:(NSString * _Nonnull)htmlString baseURL:(NSURL * _Nullable)baseURL;
- (void)scrollToRect:(CGRect)rect animated:(BOOL)animated;
@end








@interface WKWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
- (UIView * _Nonnull)associatedView SWIFT_WARN_UNUSED_RESULT;
- (void)setScrollEnabled:(BOOL)enabled;
- (void)loadUrlRequest:(NSURLRequest * _Nonnull)request;
- (void)loadHtmlString:(NSString * _Nonnull)htmlString baseURL:(NSURL * _Nullable)baseURL;
- (void)scrollToRect:(CGRect)rect animated:(BOOL)animated;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
